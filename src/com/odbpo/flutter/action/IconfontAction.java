package com.odbpo.flutter.action;

import com.google.gson.Gson;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import com.intellij.openapi.application.WriteAction;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.StandardFileSystems;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiManager;
import com.intellij.util.ThrowableRunnable;
import com.odbpo.flutter.bean.IconfontBean;
import com.odbpo.flutter.bean.IconfontJsonBean;
import com.odbpo.flutter.common.Config;
import com.odbpo.flutter.common.Constants;
import com.odbpo.flutter.util.FileUtil;
import com.odbpo.flutter.util.NotificationUtil;
import com.odbpo.flutter.util.StringUtil;

import org.apache.http.util.TextUtils;
import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * createDate: 2022/11/23 on 11:10
 * desc:
 *
 * @author azhon
 */

public class IconfontAction extends AnAction {
    @Override
    public void actionPerformed(@NotNull AnActionEvent event) {
        Project project = event.getData(PlatformDataKeys.PROJECT);
        if (project == null) return;
        Config config = Config.init(project);
        Map<String, Object> map = Config.parserYaml(project);
        Map<String, Object> flutter = (Map<String, Object>) map.get("flutter");
        if (flutter == null) {
            NotificationUtil.showNotify(project, "No iconfont file need to be generate！");
            return;
        }
        List<Map<String, Object>> fonts = (List<Map<String, Object>>) flutter.get("fonts");
        if (fonts == null) {
            NotificationUtil.showNotify(project, "No iconfont file need to be generate！");
            return;
        }
        List<IconfontBean> iconfontList = new ArrayList<>();
        for (Map<String, Object> font : fonts) {
            String family = font.get("family").toString();
            List<Map<String, Object>> fonts2 = (List<Map<String, Object>>) font.get("fonts");
            String asset = fonts2.get(0).get("asset").toString();
            if (asset.endsWith(Constants.ICONFONT_TTF)) {
                iconfontList.add(new IconfontBean(family, asset));
            }
        }
        generateIconfont(project, config, iconfontList);
        NotificationUtil.showNotify(project, "Generate Iconfont successful！");
    }

    /**
     * 生成资源文件
     */
    private void generateIconfont(Project project, Config config, List<IconfontBean> iconfontList) {
        VirtualFile dirFile = FileUtil.createDir(project, Constants.ASSETS_DIR);
        if (dirFile == null) return;
        try {
            String prefix = config.getPrefix();
            if (TextUtils.isEmpty(config.getPrefix())) {
                prefix = config.getModuleName();
            }
            String fileName = prefix + "_icon.dart";
            String code = createCode(project, prefix, iconfontList);
            WriteAction.run((ThrowableRunnable<Throwable>) () -> FileUtil.writeFile(project, dirFile, fileName, code));
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

    /**
     * 生成代码
     *
     * @return
     */
    private static String createCode(Project project, String prefix, List<IconfontBean> iconfontList) {
        PsiManager psiManager = PsiManager.getInstance(project);
        final StringBuilder codes = new StringBuilder();
        codes.append("///This file is automatically generated by the [FlutterResource], your modifications will be lost.").append("\n");
        codes.append("import 'package:flutter/widgets.dart';").append("\n\n");
        codes.append("class ").append(StringUtil.toCamelCase(prefix, true));
        codes.append("Icon").append(" {").append("\n");
        Gson gson = new Gson();
        for (IconfontBean bean : iconfontList) {
            String jsonPath = project.getBasePath() + File.separator + bean.getTtfJsonPath();
            VirtualFile file = StandardFileSystems.local().findFileByPath(jsonPath);
            if (file == null) continue;
            String json = psiManager.findFile(file).getText();
            IconfontJsonBean jsonBean = gson.fromJson(json, IconfontJsonBean.class);
            for (IconfontJsonBean.GlyphsBean glyph : jsonBean.getGlyphs()) {
                codes.append("  static const IconData ").append(StringUtil.toCamelCase(glyph.getName(), false));
                codes.append(" = IconData(0x").append(glyph.getUnicode()).append(", fontFamily: '").append(bean.getFamily());
                codes.append("');").append("\n");
            }
        }
        codes.append("}");
        codes.append("\n");
        return codes.toString();
    }
}
